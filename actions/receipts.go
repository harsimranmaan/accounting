package actions

import (
	"time"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/harsimranman/accounting/models"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Receipt)
// DB Table: Plural (receipts)
// Resource: Plural (Receipts)
// Path: Plural (/receipts)
// View Template Folder: Plural (/templates/receipts/)

// ReceiptsResource is the resource for the Receipt model
type ReceiptsResource struct {
	buffalo.Resource
}

// List gets all Receipts. This function is mapped to the path
// GET /receipts
func (v ReceiptsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	receipts := &models.Receipts{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())
	cid := (c.Value("current_user").(*models.User)).CompanyID
	if c.Value("current_budget_line") !=nil{
		bl:=c.Value("current_budget_line").(*models.BudgetLine)
		q.Where("budget_line_id = ?", bl.ID)
	}
	// Retrieve all Receipts from the DB
	if err := q.Where("company_id = ?", cid).All(receipts); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, receipts))
}

// Show gets the data for one Receipt. This function is mapped to
// the path GET /receipts/{receipt_id}
func (v ReceiptsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Receipt
	receipt := &models.Receipt{}
	cid := (c.Value("current_user").(*models.User)).CompanyID

	// To find the Receipt the parameter receipt_id is used.
	if err := tx.Eager("BudgetLine.Project").Where("company_id = ?", cid).Find(receipt, c.Param("receipt_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, receipt))
}

// New renders the form for creating a new Receipt.
// This function is mapped to the path GET /receipts/new
func (v ReceiptsResource) New(c buffalo.Context) error {
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}
	if err := tx.Eager("Projects.BudgetLines").First(&(c.Value("current_user").(*models.User)).Company); err != nil {
		return err
	}
	return c.Render(200, r.Auto(c, &models.Receipt{ ReceiptDate: time.Now()}))
}

// Create adds a Receipt to the DB. This function is mapped to the
// path POST /receipts
func (v ReceiptsResource) Create(c buffalo.Context) error {
	// Allocate an empty Receipt
	receipt := &models.Receipt{}

	// Bind receipt to the html form elements
	if err := c.Bind(receipt); err != nil {
		return errors.WithStack(err)
	}
	cid := (c.Value("current_user").(*models.User)).CompanyID
	receipt.CompanyID = cid
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(receipt)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, receipt))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Receipt was created successfully")

	// and redirect to the receipts index page
	return c.Render(201, r.Auto(c, receipt))
}

// Edit renders a edit form for a Receipt. This function is
// mapped to the path GET /receipts/{receipt_id}/edit
func (v ReceiptsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}
	company := (c.Value("current_user").(*models.User)).Company
	
	// Allocate an empty Receipt
	receipt := &models.Receipt{}
	
	if err := tx.Where("company_id = ?", company.ID).Find(receipt, c.Param("receipt_id")); err != nil {
		return c.Error(404, err)
	}
	if err := tx.Eager("Projects.BudgetLines").Find(&company, company.ID); err != nil {
		return err
	}
	t := time.Now().Format("2006-01-02")
	c.Set("today", t)

	return c.Render(200, r.Auto(c, receipt))
}

// Update changes a Receipt in the DB. This function is mapped to
// the path PUT /receipts/{receipt_id}
func (v ReceiptsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}
	cid := (c.Value("current_user").(*models.User)).CompanyID

	// Allocate an empty Receipt
	receipt := &models.Receipt{}

	if err := tx.Where("company_id = ?", cid).Find(receipt, c.Param("receipt_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Receipt to the html form elements
	if err := c.Bind(receipt); err != nil {
		return errors.WithStack(err)
	}
	receipt.CompanyID = cid
	verrs, err := tx.ValidateAndUpdate(receipt)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, receipt))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Receipt was updated successfully")

	// and redirect to the receipts index page
	return c.Render(200, r.Auto(c, receipt))
}

// Destroy deletes a Receipt from the DB. This function is mapped
// to the path DELETE /receipts/{receipt_id}
func (v ReceiptsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}
	cid := (c.Value("current_user").(*models.User)).CompanyID

	// Allocate an empty Receipt
	receipt := &models.Receipt{}

	// To find the Receipt the parameter receipt_id is used.
	if err := tx.Where("company_id = ?", cid).Find(receipt, c.Param("receipt_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(receipt); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Receipt was destroyed successfully")

	// Redirect to the receipts index page
	return c.Render(200, r.Auto(c, receipt))
}
