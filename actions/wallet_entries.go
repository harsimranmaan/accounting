package actions

import (
	"time"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/harsimranman/accounting/models"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (WalletEntry)
// DB Table: Plural (wallet_entries)
// Resource: Plural (WalletEntries)
// Path: Plural (/wallet_entries)
// View Template Folder: Plural (/templates/wallet_entries/)

// WalletEntriesResource is the resource for the WalletEntry model
type WalletEntriesResource struct {
	buffalo.Resource
}

// List gets all WalletEntries. This function is mapped to the path
// GET /wallet_entries
func (v WalletEntriesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	walletEntries := &models.WalletEntries{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all WalletEntries from the DB
	if err := q.All(walletEntries); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, walletEntries))
}

// Show gets the data for one WalletEntry. This function is mapped to
// the path GET /wallet_entries/{wallet_entry_id}
func (v WalletEntriesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty WalletEntry
	walletEntry := &models.WalletEntry{}

	// To find the WalletEntry the parameter wallet_entry_id is used.
	if err := tx.Find(walletEntry, c.Param("wallet_entry_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, walletEntry))
}

// New renders the form for creating a new WalletEntry.
// This function is mapped to the path GET /wallet_entries/new
func (v WalletEntriesResource) New(c buffalo.Context) error {
	return c.Render(200, r.Auto(c, &models.WalletEntry{}))
}

// Create adds a WalletEntry to the DB. This function is mapped to the
// path POST /wallet_entries
func (v WalletEntriesResource) Create(c buffalo.Context) error {
	// Allocate an empty WalletEntry
	walletEntry := &models.WalletEntry{}

	// Bind walletEntry to the html form elements
	if err := c.Bind(walletEntry); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(walletEntry)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, walletEntry))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "WalletEntry was created successfully")

	// and redirect to the wallet_entries index page
	return c.Render(201, r.Auto(c, walletEntry))
}

// Pay renders a payment form for a Receipt. This function is
// mapped to the path GET /receipts/{receipt_id}/pay
func (w WalletEntriesResource) Pay(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}
	company := (c.Value("currentUser").(*models.User)).Company
	
	// Allocate an empty Receipt
	receipt := &models.Receipt{}
	
	if err := tx.Where("company_id = ?", company.ID).Find(receipt, c.Param("receipt_id")); err != nil {
		return c.Error(404, err)
	}
	walletEntry := &models.WalletEntry{ReceiptID: receipt.ID, PaymentDate: time.Now()}
	c.Set("walletEntry", walletEntry)
	return c.Render(200, r.HTML("wallet_entries/pay.html"))
}
// MakePayment records a Receipt payment in the DB. This function is mapped to
// the path POST /receipts/{receipt_id}/make_payment
func (w WalletEntriesResource) MakePayment(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}
	cid := (c.Value("currentUser").(*models.User)).CompanyID

	// Allocate an empty Receipt
	receipt := &models.Receipt{}

	if err := tx.Where("company_id = ?", cid).Find(receipt, c.Param("receipt_id")); err != nil {
		return c.Error(404, err)
	}
	walletEntry := &models.WalletEntry{}

	// Bind Receipt to the html form elements
	if err := c.Bind(walletEntry); err != nil {
		return errors.WithStack(err)
	}
	walletEntry.CompanyID = cid
	walletEntry.Amount = receipt.Amount
	walletEntry.ReceiptID= receipt.ID
	verrs, err := tx.ValidateAndCreate(walletEntry)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, receipt))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Receipt was paid successfully")

	// and redirect to the receipts index page
	return c.Render(200, r.Auto(c, walletEntry))	
}

// Edit renders a edit form for a WalletEntry. This function is
// mapped to the path GET /wallet_entries/{wallet_entry_id}/edit
func (v WalletEntriesResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty WalletEntry
	walletEntry := &models.WalletEntry{}

	if err := tx.Find(walletEntry, c.Param("wallet_entry_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, walletEntry))
}

// Update changes a WalletEntry in the DB. This function is mapped to
// the path PUT /wallet_entries/{wallet_entry_id}
func (v WalletEntriesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty WalletEntry
	walletEntry := &models.WalletEntry{}

	if err := tx.Find(walletEntry, c.Param("wallet_entry_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind WalletEntry to the html form elements
	if err := c.Bind(walletEntry); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(walletEntry)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, walletEntry))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "WalletEntry was updated successfully")

	// and redirect to the wallet_entries index page
	return c.Render(200, r.Auto(c, walletEntry))
}

// Destroy deletes a WalletEntry from the DB. This function is mapped
// to the path DELETE /wallet_entries/{wallet_entry_id}
func (v WalletEntriesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty WalletEntry
	walletEntry := &models.WalletEntry{}

	// To find the WalletEntry the parameter wallet_entry_id is used.
	if err := tx.Find(walletEntry, c.Param("wallet_entry_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(walletEntry); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "WalletEntry was destroyed successfully")

	// Redirect to the wallet_entries index page
	return c.Render(200, r.Auto(c, walletEntry))
}
